<?xml version="1.0" encoding="UTF-8"?>
<test-data  xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
  <test-code reinitializeRule="false" regressionTest="true">
    <description>Java util logger is used</description>
    <expected-problems>1</expected-problems>
    <expected-linenumbers>5</expected-linenumbers>
    <code><![CDATA[
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
class Foo{
    Logger log = LoggerFactory.getLogger(Foo.class.getName());
    java.util.logging.Logger log2 = Logger.getLogger(Foo.class.getName());
}
]]></code>
  </test-code>

  <test-code reinitializeRule="true" regressionTest="true">
    <description>Multiple different loggers are used</description>
    <expected-problems>4</expected-problems>
    <expected-linenumbers>3, 5, 6, 8</expected-linenumbers>
    <code><![CDATA[
import org.slf4j.LoggerFactory;
class Foo{
    org.apache.commons.logging.Log log1 = LogFactory.getLog(Foo.class.getName());
    org.slf4j.Logger log3 = LoggerFactory.getLogger(Foo.class.getName());
    java.util.logging.Logger log4 = Logger.getLogger(Foo.class.getName());
    ch.qos.logback.classic.Logger log5 = new ch.qos.logback.classic.LoggerContext.getLogger(Foo.class.getName());
    public void test() {
        org.apache.log4j.Logger log2;
        log2 = org.apache.log4j.Logger.getLogger(Foo.class.getName());
    }
}
]]></code>
  </test-code>

  <test-code reinitializeRule="true" regressionTest="true">
    <description>No logger is used</description>
    <expected-problems>0</expected-problems>
    <code><![CDATA[
class Foo{
}
]]></code>
  </test-code>

  <test-code reinitializeRule="true" regressionTest="true">
    <description>Variable named logger that doesn't reference a Logger</description>
    <expected-problems>0</expected-problems>
    <code><![CDATA[
class Foo{
    private Integer logger = 5;
}
]]></code>
  </test-code>
    <test-code reinitializeRule="true" regressionTest="true">
    <description>Unknown logger used</description>
    <expected-problems>1</expected-problems>
    <expected-linenumbers>2</expected-linenumbers>
    <code><![CDATA[
class Foo{
    Logger logger = new unknown.packg.Logger();
}
]]></code>
  </test-code>
  <test-code reinitializeRule="true" regressionTest="true">
    <description>Real smarthome class</description>
    <expected-problems>0</expected-problems>
    <code><![CDATA[
/**
 * Copyright (c) 2014,2018 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
package org.openhab.core.library.types;

import java.util.Arrays;
import java.util.Base64;

import org.openhab.core.types.PrimitiveType;
import org.openhab.core.types.State;

/**
 * This type can be used for all binary data such as images, documents, sounds etc.
 * Note that it is NOT adequate for any kind of streams, but only for fixed-size data.
 *
 * @author Kai Kreuzer
 * @author Laurent Garnier - add MIME type
 *
 */
public class RawType implements PrimitiveType, State {

    public static final String DEFAULT_MIME_TYPE = "application/octet-stream";

    protected byte[] bytes;
    protected String mimeType;

    @Deprecated
    public RawType() {
        this(new byte[0], DEFAULT_MIME_TYPE);
    }

    @Deprecated
    public RawType(byte[] bytes) {
        this(bytes, DEFAULT_MIME_TYPE);
    }

    public RawType(byte[] bytes, String mimeType) {
        if (mimeType == null) {
            throw new IllegalArgumentException("mimeType argument must not be null");
        } else if (mimeType.isEmpty()) {
            throw new IllegalArgumentException("mimeType argument must not be blank");
        }
        this.bytes = bytes;
        this.mimeType = mimeType;
    }

    public byte[] getBytes() {
        return bytes;
    }

    public String getMimeType() {
        return mimeType;
    }

    public static RawType valueOf(String value) {
        int idx, idx2;
        if (value == null) {
            throw new IllegalArgumentException("Argument must not be null");
        } else if (value.isEmpty()) {
            throw new IllegalArgumentException("Argument must not be blank");
        } else if (!value.startsWith("data:") || ((idx = value.indexOf(",")) < 0)) {
            throw new IllegalArgumentException("Invalid data URI syntax for argument " + value);
        } else if ((idx2 = value.indexOf(";")) <= 5) {
            throw new IllegalArgumentException("Missing MIME type in argument " + value);
        }
        return new RawType(Base64.getDecoder().decode(value.substring(idx + 1)), value.substring(5, idx2));
    }

    @Override
    public String toString() {
        return String.format("raw type (%s): %d bytes", mimeType, bytes.length);
    }

    @Override
    public String toFullString() {
        return String.format("data:%s;base64,%s", mimeType, Base64.getEncoder().encodeToString(bytes));
    }

    @Override
    public String format(String pattern) {
        return toFullString();
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + Arrays.hashCode(bytes);
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        RawType other = (RawType) obj;
        if (!mimeType.equals(other.mimeType)) {
            return false;
        }
        if (!Arrays.equals(bytes, other.bytes)) {
            return false;
        }
        return true;
    }

}
]]></code>
  </test-code>
  <test-code reinitializeRule="true" regressionTest="true">
    <description>Unresolved inferred var types</description>
    <expected-problems>0</expected-problems>
    <code><![CDATA[
class Foo {
    Foo() {
        var oh = "openHAB";
        var obj1 = new Object();
        var obj2 = null;
        var i = 1;
    }
}
]]></code>
  </test-code>
</test-data>
